"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
require("nativescript-websockets");
var Message = (function () {
    function Message(author, text) {
        this.text = text;
        this.author = author;
    }
    return Message;
}());
exports.Message = Message;
var Connection = (function () {
    function Connection(host) {
        this.host = host;
    }
    Connection.prototype.initEventsMapping = function () {
        var _this = this;
        this.rsub = this.receiver.map(function (event) {
            return JSON.parse(event);
        }).subscribe(function (value) {
            var type = value.type;
            if (_this.eventMap[type]) {
                return _this.eventMap[type].next(value.data);
            }
        });
    };
    Connection.prototype.establishConnection = function (id, rooms) {
        var _this = this;
        return new Rx_1.Observable(function (subscriber) {
            _this.eventMap = {};
            _this.id = id;
            _this.receiver = new Rx_1.Subject();
            _this.socket =
                new WebSocket("ws://" + _this.host + "/ws/join/?id=" + id + (rooms.length ?
                    "?rooms=" + rooms.join(',') : ""), []);
            _this.socket.onopen = function (event) {
                console.log("Handshake success.");
                subscriber.next({
                    success: true,
                    rooms: rooms
                });
                _this.initEventsMapping();
            };
            _this.socket.onerror = function (event) {
                console.log("Handshake failed.");
                subscriber.error(event);
            };
            _this.socket.onmessage = function (message) {
                console.log(JSON.stringify(message.data));
                _this.receiver.next(message.data);
            };
        });
    };
    Connection.prototype.subscribeTo = function (event) {
        if (this.eventMap[event]) {
            return this.eventMap[event];
        }
        else {
            this.eventMap[event] = new Rx_1.Subject();
            return this.eventMap[event];
        }
    };
    Connection.prototype.send = function (data) {
        this.socket.send(JSON.stringify(data));
    };
    Connection.prototype.closeConnection = function () {
        var _this = this;
        if (!this.socket || !this.socket.CLOSED) {
            throw new Error("Connection is already closed");
        }
        return new Rx_1.Observable(function (subscriber) {
            _this.socket.onclose = function () {
                subscriber.next({ closed: true });
            };
            _this.rsub.unsubscribe();
            _this.socket.close();
        });
    };
    return Connection;
}());
var ChatroomService = (function () {
    function ChatroomService() {
        this.messages = [];
        this.connection = new Connection("172.18.0.1:8080");
    }
    ChatroomService.prototype.connect = function (id, rooms) {
        return this.connection.establishConnection(id, rooms);
    };
    ChatroomService.prototype.requestMessages = function (data, room) {
        this.connection.send(Object.assign({}, data, { room: room }));
    };
    ChatroomService.prototype.getMessages = function (room) {
        this.requestMessages({ type: "get" }, room);
        return this.on('get', room);
    };
    ChatroomService.prototype.on = function (event, roomname) {
        return this.connection.subscribeTo(event);
    };
    ChatroomService.prototype.disconnect = function () {
        return this.connection.closeConnection();
    };
    return ChatroomService;
}());
ChatroomService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], ChatroomService);
exports.ChatroomService = ChatroomService;
//# sourceMappingURL=data:application/json;base64,